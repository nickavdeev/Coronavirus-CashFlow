using System;
using System.Collections.Generic;
using System.Linq;

namespace CoronavirusCashFlow
{
    public enum PlayerInfoTypes
    {
        MainInfo,
        IncomeInfo,
        ExpensesInfo,
        AssetsInfo,
        LiabilitiesInfo,
        TimeInfo
    }
    internal static class GameModel
    {
        public static readonly Player Player = SetStudentMike();
        private static readonly PlayingField PlayingFieldMap = new PlayingField();
        
        public static int Cube;
        public static PlayingCell CurrentField = PlayingFieldMap.FieldList[Player.Cell];

        private static Player SetStudentMike()
        { 
            var studentMike = new Player(
                "–ú–∏—Ö–∞–∏–ª", 
                "–°—Ç—É–¥–µ–Ω—Ç —Å–æ —Å–≤–æ–µ–π –æ–¥–Ω–æ–∫–æ–º–Ω–∞—Ç–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä–æ–π –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π. –ù–æ –ú–∏—Ö–∞–∏–ª —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Å–ø–æ—Å–æ–±–µ–Ω –Ω–∞ –±–æ–ª—å—à–µ–µ!",
                Car.GetCar("Porsche Cayman"),
                100000, 
                new List<Asset>(), 
                new List<Liability>());
            studentMike.AddAsset(Work.GetWork("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç"));
            studentMike.AddAsset(Stock.GetStock("Netflix"));
            studentMike.AddLiability(SocialNeed.GetSocialNeed("–°–≤–æ—è –∫–≤–∞—Ä—Ç–∏—Ä–∞"));
            return studentMike;
        }

        public static string PlayerInfo(Player player, PlayerInfoTypes type)
        {
            switch (type)
            {
                case PlayerInfoTypes.MainInfo:
                    return $"–ú–µ—á—Ç–∞: {player.Dream.Title}\n \n" + $"–°–±–µ—Ä–µ–∂–µ–Ω–∏—è: {player.Savings}\n \n" +
                           $"–î–µ–Ω–µ–∂–Ω—ã–π –ø–æ—Ç–æ–∫: {player.CashFlow()}\n \n" + $"–î–æ—Ö–æ–¥—ã: {player.Income()}\n \n" +
                           $"–†–∞—Å—Ö–æ–¥—ã: {player.Expenses()}\n \n" + $"–ê–∫—Ç–∏–≤—ã: {player.Assets()}\n \n" +
                           $"–ü–∞—Å—Å–∏–≤—ã: {player.Liabilities()}\n \n" + $"–í—Ä–µ–º—è: {player.Hours()}";
                case PlayerInfoTypes.IncomeInfo:
                    return string.Join("\n \n", player.AssetsList.Select(x => $"{x.Title} ({x.Income})"));
                case PlayerInfoTypes.ExpensesInfo:
                    return string.Join("\n \n", player.LiabilitiesList.Select(x => $"{x.Title} ({x.Expense})"));
                case PlayerInfoTypes.AssetsInfo:
                    return string.Join("\n \n", player.AssetsList.Select(x => $"{x.Title} ({x.Cost})"));
                case PlayerInfoTypes.LiabilitiesInfo:
                    return string.Join("\n \n", player.LiabilitiesList.Select(x => $"{x.Title} ({x.Cost})"));
                case PlayerInfoTypes.TimeInfo:
                {
                    var assetTime = string.Join("\n \n", player.AssetsList.Select(x => $"{x.Title} ({x.Hours})"));
                    var liabilityTime = string.Join("\n \n", player.LiabilitiesList.Select(x => $"{x.Title} ({x.Hours})"));
                    return $"–ê–∫—Ç–∏–≤—ã –≤—Ä–µ–º–µ–Ω–∏:\n \n{liabilityTime}\n \n \n \n–ü–∞—Å—Å–∏–≤—ã –≤—Ä–µ–º–µ–Ω–∏:\n \n{assetTime}";
                }
                default:
                    throw new ArgumentOutOfRangeException(nameof(type), type, null);
            }
        }

        public static void GetMove()
        {
            var goals = new List<bool> { Player.LiabilitiesList.Contains(Player.Dream) };
            if (!goals.Contains(false)) 
                Console.WriteLine($"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Å–≤–æ–µ–π –º–µ—á—Ç—ã: {Player.Name} –∫—É–ø–∏–ª {Player.Dream.Title}! üéâ");

            Stock.GetStock("Netflix").Cost += 100;
            
            Cube = new Random().Next(1, 7);

            Player.Cell += Cube;
            if (Player.Cell > PlayingField.Cells) Player.Cell -= PlayingField.Cells;

            CurrentField = PlayingFieldMap.FieldList[Player.Cell];
        }
    }
}